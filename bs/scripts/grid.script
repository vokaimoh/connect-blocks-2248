local m_game = require "bs.lua.game"

local function hexagon_create(col, row, offset)
	local hexagon = {}
	hexagon.pos = vmath.vector3(m_game.cell_size * (col - 1) + m_game.cell_offset_x, m_game.cell_size * (row - 1) + m_game.cell_offset_y, 0)
	if offset then
		hexagon.pos.y = m_game.cell_size / 2 + hexagon.pos.y
	end
	hexagon.level = math.random(1, m_game.level)
	hexagon.id = factory.create("#factory-hexagon", hexagon.pos, nil, { level = hexagon.level })
	return hexagon
end

local function cells_clear(cells, message)
	for i = 1, 5 do
		for j = 1, 7 do
			if cells[i][j].hexagon_id ~= nil then
				msg.post(cells[i][j].hexagon_id, message, { duration = m_game.duration_fade })
				msg.post(cells[i][j].hexagon_id, "delete", { duration = m_game.duration_fade })
			end
		end
	end
	return nil
end

local function cells_load(cells)
	for i = 1, 5 do
		for j = 1, 7 do
			local pos = vmath.vector3(m_game.cell_size * (cells[i][j].col - 1) + m_game.cell_offset_x,
			m_game.cell_size * (cells[i][j].row - 1) + m_game.cell_offset_y, 0)
			if i % 2 == 0 then
				pos.y = m_game.cell_size / 2 + pos.y
			end
			cells[i][j].hexagon_pos = pos
			cells[i][j].hexagon_id = factory.create("#factory-hexagon", cells[i][j].hexagon_pos, nil, { level = cells[i][j].hexagon_level })
			msg.post(cells[i][j].hexagon_id, "fade_in", { duration = m_game.duration_fade })
		end
	end
end

local function cells_fill(cells, first)
	if cells ~= nil then
		for i = 1, 5 do
			for j = 1, 7 do
				if cells[i][j].hexagon_id == nil then
					local hexagon = hexagon_create(i, j, i % 2 == 0)
					if first == false then
						msg.post(hexagon.id, "fade_in", { duration = m_game.duration_create })
						msg.post(hexagon.id, "scale_in", { duration = m_game.duration_create })
					else
						msg.post(hexagon.id, "fade_in", { duration = m_game.duration_fade })
					end
					cells[i][j] = { col = i, row = j, hexagon_id = hexagon.id, hexagon_pos = hexagon.pos, hexagon_level = hexagon.level }
				end
			end
		end
	end
end

local function cells_create()
	local cells = {}
	for i = 1, 5 do
		cells[i] = {}
		for j = 1, 7 do
			cells[i][j] = {}
		end
	end
	return cells
end

function init(self)
	m_game.level = m_game.load_level()
	self.cells = m_game.load_cells()
	if self.cells == nil then
		self.cells = cells_create()
		cells_fill(self.cells, true)
	else
		cells_load(self.cells)
	end
	self.score = m_game.load_score()
	self.link = {}
	self.lines = {}
	m_game.input_focus_waiting(m_game.duration_create)
end

function on_message(self, message_id, message, sender)
	if message_id == m_game.cells_clear then
		msg.post(".", "release_input_focus")
		self.cells = cells_clear(self.cells, "hide")
	end
end

local function lines_delete(lines)
	for i = 1, #lines do
		go.delete(lines[i])
	end
	return {}
end

local function hexagons_fall(self)
	if self.cells ~= nil then
		for i = 1, 5 do
			local empty = 0
			for j = 1, 7 do
				local cell = self.cells[i][j]
				if cell.hexagon_id == nil then
					empty = empty + 1
				elseif empty > 0 then
					local offset = 0
					if i % 2 == 0 then
						offset = m_game.cell_size / 2
					end
					go.animate(cell.hexagon_id, "position.y", go.PLAYBACK_ONCE_FORWARD,
					m_game.cell_size * (j - 1 - empty) + m_game.cell_offset_y + offset, go.EASING_LINEAR, m_game.duration_fall)
					self.cells[i][j - empty].hexagon_id = cell.hexagon_id
					self.cells[i][j - empty].hexagon_level = cell.hexagon_level
					self.cells[i][j].hexagon_id = nil
				end
			end
		end
	end
end

local function score_send(current_score)
	msg.post("game#game", "set_score", { score = current_score })
end

local function preview_send(link)
	local current_preview = 0
	if #link > 1 then
		for i = 1, #link do
			current_preview = current_preview + 2 ^ link[i].hexagon_level
		end
	end
	msg.post("game#game", "set_preview", { preview = current_preview / 2 })
end

local function hexagons_merge(self)
	local last = self.link[#self.link]
	local sum = 2 ^ last.hexagon_level
	for i = 1, #self.link - 1 do
		local cell = self.link[i]
		msg.post(cell.hexagon_id, "fade_out", { duration = m_game.duration_create })
		msg.post(cell.hexagon_id, "delete", { duration = m_game.duration_create })
		go.animate(cell.hexagon_id, "position", go.PLAYBACK_ONCE_FORWARD, last.hexagon_pos, go.EASING_LINEAR, m_game.duration_create)
		sum = sum + 2 ^ cell.hexagon_level
		self.cells[cell.col][cell.row].hexagon_id = nil
	end
	local level_current = math.floor(math.log(sum) / m_game.log2)
	self.cells[last.col][last.row].hexagon_level = level_current
	msg.post(last.hexagon_id, "level_up", { duration = m_game.duration_create, level = level_current })
	if level_current - 2 > m_game.level then
		m_game.level = level_current - 2
	end
end

local function check_over(cells)
	if cells ~= nil then
		for i = 1, 5 do
			for j = 1, 7 do
				if cells[i][j].hexagon_id ~= nil then
					if i > 1 then -- check left
						if cells[i-1][j].hexagon_id ~= nil and cells[i-1][j].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i-1][j].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
					if i < 5 then -- check right
						if cells[i+1][j].hexagon_id ~= nil and cells[i+1][j].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i+1][j].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
					if j > 1 then -- check down
						if cells[i][j-1].hexagon_id ~= nil and cells[i][j-1].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i][j-1].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
					if j < 7 then -- check up
						if cells[i][j+1].hexagon_id ~= nil and cells[i][j+1].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i][j+1].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
					if i > 1 and j > 1 then -- check left/up
						if cells[i-1][j-1].hexagon_id ~= nil and cells[i-1][j-1].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i-1][j-1].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
					if i < 5 and j < 7 then -- check right/up
						if cells[i+1][j+1].hexagon_id ~= nil and cells[i+1][j+1].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i+1][j+1].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
					if i > 1 and j < 7 then -- check left/up
						if cells[i-1][j+1].hexagon_id ~= nil and cells[i-1][j+1].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i-1][j+1].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
					if i < 5 and j > 1 then -- check left/up
						if cells[i+1][j-1].hexagon_id ~= nil and cells[i+1][j-1].hexagon_level == cells[i][j].hexagon_level
						and vmath.length(cells[i+1][j-1].hexagon_pos -  cells[i][j].hexagon_pos) < m_game.radius_connect then
							return false
						end
					end
				end
			end
		end
	end
	return true
end

local function link_remove(self)
	if #self.link > 1 then
		msg.post(".", "release_input_focus")
		sound.play("#sound-merge", { gain = m_game.volume * m_game.volume_max })
		local score = 0
		if #self.link > 1 then
			for i = 1, #self.link do
				score = score + 2 ^ self.link[i].hexagon_level
			end
		end
		self.score = self.score + (score / 2)
		hexagons_merge(self)
		timer.delay(m_game.duration_remove, false, function()
			sound.play("#sound-pop", { gain = m_game.volume * m_game.volume_max })
			cells_fill(self.cells, false)
			local over = check_over(self.cells)
			if self.cells ~= nil then
				if over then
					m_game.save_cells(nil)
					m_game.save_score(nil)
					m_game.save_level(nil)
				else
					m_game.save_cells(self.cells)
					m_game.save_score(self.score)
					m_game.save_level(m_game.level)
				end
			end
			if over then
				m_game.last = self.score
				if m_game.last > m_game.best then
					m_game.save_best(m_game.last)
				end
				timer.delay(m_game.duration_over, false, function()
					msg.post("game#game", "over")
					self.cells = cells_clear(self.cells, "fade_out")
				end)
			else
				m_game.input_focus_waiting(m_game.duration_create)
			end
		end)
		timer.delay(m_game.duration_create, false, function()
			score_send(self.score)
			preview_send(self.link)
			hexagons_fall(self)
		end)
	end
	self.link = {}
end

local function line_create(a_point, b_point)
	local diff = vmath.vector3(a_point.x - b_point.x, a_point.y - b_point.y, 0)
	local pos = vmath.vector3(a_point.x - (diff.x / 2), a_point.y - (diff.y / 2), 0)
	local line_id
	if diff.y ~= 0 then
		if (diff.x > 0 and diff.y > 0) or (diff.x < 0 and diff.y < 0) then
			line_id = factory.create("#factory-line", pos, m_game.quat2)
		elseif diff.x ~= 0 then
			line_id = factory.create("#factory-line", pos, m_game.quat3)
		else
			line_id = factory.create("#factory-line", pos, m_game.quat1)
		end
	else
		line_id = factory.create("#factory-line", pos)
	end
	return line_id
end

local function add_to_link(self, pos)
	local col = math.floor((pos.x - (m_game.cell_offset_x - m_game.cell_size / 2)) / m_game.cell_size) + 1
	local offset = 0
	if col % 2 == 0 then
		offset = m_game.cell_size / 2
	end
	local row = math.floor((pos.y - offset - (m_game.cell_offset_y - m_game.cell_size / 2)) / m_game.cell_size) + 1
	if col > 0 and row > 0 and col < 6 and row < 8 then
		local cells = {}
		cells.curr = self.cells[col][row]
		if vmath.length(cells.curr.hexagon_pos - pos) < m_game.radius_select then
			if #self.link == 0 then
				table.insert(self.link, cells.curr)
				return
			elseif #self.link > 1 then
				if cells.curr == self.link[#self.link - 1] then
					go.delete(self.lines[#self.lines])
					table.remove(self.lines, #self.lines)
					table.remove(self.link, #self.link)
					preview_send(self.link)
					return
				end
				for i = 1, #self.link do
					if self.link[i] == cells.curr then
						return
					end
				end
			end
			cells.last = self.link[#self.link]
			if cells.last.hexagon_level == cells.curr.hexagon_level or 
			(cells.curr.hexagon_level - cells.last.hexagon_level == 1 and #self.link > 1) then
				if math.max(math.abs(cells.last.col - cells.curr.col), math.abs(cells.last.row - cells.curr.row)) == 1 and
				vmath.length(cells.last.hexagon_pos - cells.curr.hexagon_pos) < m_game.radius_connect then
					table.insert(self.lines, line_create(cells.curr.hexagon_pos, cells.last.hexagon_pos))
					sound.play("#sound-select", { speed = 1 + #self.link * 0.1, gain = m_game.volume * m_game.volume_max })
					table.insert(self.link, cells.curr)
					preview_send(self.link)
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == m_game.touch then
		if action.released then
			if #self.link > 0 then
				link_remove(self)
			end
			if #self.lines > 0 then
				self.lines = lines_delete(self.lines)
			end
		else
			add_to_link(self, m_game.screen_to_world(vmath.vector3(action.x, action.y, 0)))
		end
	end
end
