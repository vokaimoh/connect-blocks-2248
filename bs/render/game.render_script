-- Copyright 2020-2023 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
-- 
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
-- 
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.
local m_game = require "bs.lua.game"
--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
	local projected_width = render.get_window_width() / (zoom or 1)
	local projected_height = render.get_window_height() / (zoom or 1)
	local xoffset = -(projected_width - render.get_width()) / 2
	local yoffset = -(projected_height - render.get_height()) / 2
	return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
	return fixed_projection(near, far, math.min(render.get_window_width() / render.get_width(), render.get_window_height() / render.get_height()))
end

local function get_projection(self)
	return self.projection_fn(self.near, self.far, self.zoom)
end

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	-- background predicate
	self.background_pred = render.predicate({"background"})

	self.clear_color = vmath.vector4(sys.get_config("render.clear_color_red", 0), sys.get_config("render.clear_color_green", 0),
	sys.get_config("render.clear_color_blue", 0), sys.get_config("render.clear_color_alpha", 0))

	self.near = -1
	self.far = 1
	self.projection_fn = fixed_fit_projection

	m_game.proj = get_projection(self)
end

function update(self)
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	if window_width == 0 or window_height == 0 then
		return
	end

	-- clear screen buffers
	--
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	-- render world (sprites, tilemaps, particles etc)
	--
	local proj = get_projection(self)

	render.set_viewport(0, 0, window_width, window_height)
	render.set_view(m_game.matrix4_zero)

	-- render background gradient
	render.set_projection(m_game.matrix4_zero)
	render.disable_state(render.STATE_BLEND)
	render.draw(self.background_pred)

	render.set_projection(proj)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.draw(self.particle_pred, {frustum = proj})
	render.draw(self.tile_pred, {frustum = proj})
	render.draw_debug3d()

	-- render GUI
	--
	local proj_gui = vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1)

	render.set_projection(proj_gui)

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred, {frustum = proj_gui})
	render.draw(self.text_pred, {frustum = proj_gui})
	render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
	if message_id == m_game.clear_color then
		self.clear_color = message.color
	elseif message_id == m_game.window_resized then
		m_game.proj = get_projection(self)
	end
end
