local m_game = require "bs.lua.game"

function init(self)
	self.box = gui.get_node("box")
	self.targ_score = 0
	self.add_score = 0
	self.count_score = gui.get_node("counter-score")
	local score = m_game.load_score()
	if score ~= 0 then
		self.targ_score = score
		gui.set_text(self.count_score, score)
	end
	self.targ_preview = 0
	self.add_preview = 0
	self.count_preview = gui.get_node("counter-preview")
	self.button_back = gui.get_node("button-back")
	self.button_restart = gui.get_node("button-restart")
	gui.set_enabled(self.count_preview, false)
	m_game.gui_init()
end

local function update_text(node, text, target, diff, dt, time, add)
	if add > 0 then
		add = add - (dt / (time / (math.abs(diff))))
		if diff > 0 then
			text = text .. tostring(math.floor(target - add))
		else
			text = text .. tostring(math.ceil(target + add))
		end
		gui.set_text(node, text)
		return add
	end
	gui.set_text(node, text .. tostring(target))
	return 0
end

function update(self, dt)
	if self.add_score ~= 0 then
		self.add_score = update_text(self.count_score, "", self.targ_score,
		self.diff_score, dt, m_game.duration_remove, self.add_score)
	end
	if self.add_preview ~= 0 then
		self.add_preview = update_text(self.count_preview, "+ ", self.targ_preview,
		self.diff_preview, dt, m_game.duration_preview, self.add_preview)
	end
end

function on_message(self, message_id, message, sender)
	m_game.gui_message(self.box, message_id, message)
	if message_id == m_game.over then
		m_game.gui_switch("over")
	elseif message_id == m_game.set_score then
		self.diff_score = message.score - self.targ_score
		self.add_score = math.abs(self.diff_score)
		self.targ_score = message.score
	elseif message_id == m_game.set_preview then
		self.diff_preview = message.preview - self.targ_preview
		self.add_preview = math.abs(self.diff_preview)
		self.targ_preview = message.preview
		gui.set_enabled(self.count_preview, self.targ_preview > 0)
	end
end

function on_input(self, action_id, action)
	if action_id == m_game.touch and action.pressed then
		if gui.pick_node(self.button_back, action.x, action.y) then
			msg.post("grid#grid", "cells_clear")
			m_game.gui_switch("start")
		elseif gui.pick_node(self.button_restart, action.x, action.y) then
			msg.post("grid#grid", "cells_clear")
			m_game.gui_switch("game")
			m_game.save_cells(nil)
			m_game.save_score(nil)
			m_game.save_level(nil)
		end
	end
end
